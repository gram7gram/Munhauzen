android {
    buildToolsVersion "28.0.3"
    compileSdkVersion 28
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['../core/assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {
        applicationId "ua.gram.munhauzen"
        minSdkVersion 9
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        manifestPlaceholders = [
                appName      : "Robinzon",
                appNameSuffix: "?",
        ]
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'androiddebug'
            keyAlias 'androiddebugkey'
            keyPassword 'androiddebug'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'tier', 'i18n'
    productFlavors {
        free {
            applicationId "ua.gram.munhauzen.free"
            versionNameSuffix "-free"
            dimension "tier"
            buildConfigField "boolean", "isAdvEnabled", "true"
            buildConfigField "boolean", "isPro", "false"

            manifestPlaceholders.appNameSuffix = "Free"
        }
        pro {
            applicationId "ua.gram.munhauzen.pro"
            versionNameSuffix "-pro"
            dimension "tier"
            buildConfigField "boolean", "isAdvEnabled", "false"
            buildConfigField "boolean", "isPro", "true"

            manifestPlaceholders.appNameSuffix = "Premium"
        }
        uk {
            versionNameSuffix "-uk"
            dimension "i18n"
            resConfig "uk"
            buildConfigField "String", "locale", "\"uk\""

            manifestPlaceholders.appName = "Сам собі Мюнхаузен"
        }
        ru {
            versionNameSuffix "-ru"
            dimension "i18n"
            resConfig "ru"
            buildConfigField "String", "locale", "\"ru\""

            manifestPlaceholders.appName = "Сам себе Мюнхаузен"
        }
        en {
            versionNameSuffix "-en"
            dimension "i18n"
            resConfig "en"
            buildConfigField "String", "locale", "\"en\""

            manifestPlaceholders.appName = "Munhauzen"
        }
    }
}
// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}
tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}
task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'ua.gram.munhauzen/ua.gram.munhauzen.AndroidLauncher'
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [COMPILE: [plus: [project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}
dependencies {
}